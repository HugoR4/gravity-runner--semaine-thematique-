//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Inputs Config/inputPlayer.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputPlayer: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputPlayer()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""inputPlayer"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""6bf03942-7f18-486b-a3e6-626fad1f9749"",
            ""actions"": [
                {
                    ""name"": ""gravitySwitch"",
                    ""type"": ""Button"",
                    ""id"": ""00289198-d96e-48d2-b53a-ca31d3a9b91b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""primaryContact"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f0c2d4a8-8f0f-4b6a-81f9-f189494cf2a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""primaryPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f44b4825-97c3-4041-91ec-0e5d9c7587e9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""testClavier"",
                    ""type"": ""Button"",
                    ""id"": ""128462dc-444d-4332-8874-f7ef1091c392"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1c030811-6052-498d-bb2d-58d7b2bcaa62"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""gravitySwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2727a0e2-f21e-4839-8171-dc920eca72cd"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""primaryContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f07c9672-ff15-4148-9f66-06ad969ce3ed"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""primaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f98cb2ce-86db-4a1d-8366-362c4c9e19ab"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""testClavier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_gravitySwitch = m_Player.FindAction("gravitySwitch", throwIfNotFound: true);
        m_Player_primaryContact = m_Player.FindAction("primaryContact", throwIfNotFound: true);
        m_Player_primaryPosition = m_Player.FindAction("primaryPosition", throwIfNotFound: true);
        m_Player_testClavier = m_Player.FindAction("testClavier", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_gravitySwitch;
    private readonly InputAction m_Player_primaryContact;
    private readonly InputAction m_Player_primaryPosition;
    private readonly InputAction m_Player_testClavier;
    public struct PlayerActions
    {
        private @InputPlayer m_Wrapper;
        public PlayerActions(@InputPlayer wrapper) { m_Wrapper = wrapper; }
        public InputAction @gravitySwitch => m_Wrapper.m_Player_gravitySwitch;
        public InputAction @primaryContact => m_Wrapper.m_Player_primaryContact;
        public InputAction @primaryPosition => m_Wrapper.m_Player_primaryPosition;
        public InputAction @testClavier => m_Wrapper.m_Player_testClavier;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @gravitySwitch.started += instance.OnGravitySwitch;
            @gravitySwitch.performed += instance.OnGravitySwitch;
            @gravitySwitch.canceled += instance.OnGravitySwitch;
            @primaryContact.started += instance.OnPrimaryContact;
            @primaryContact.performed += instance.OnPrimaryContact;
            @primaryContact.canceled += instance.OnPrimaryContact;
            @primaryPosition.started += instance.OnPrimaryPosition;
            @primaryPosition.performed += instance.OnPrimaryPosition;
            @primaryPosition.canceled += instance.OnPrimaryPosition;
            @testClavier.started += instance.OnTestClavier;
            @testClavier.performed += instance.OnTestClavier;
            @testClavier.canceled += instance.OnTestClavier;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @gravitySwitch.started -= instance.OnGravitySwitch;
            @gravitySwitch.performed -= instance.OnGravitySwitch;
            @gravitySwitch.canceled -= instance.OnGravitySwitch;
            @primaryContact.started -= instance.OnPrimaryContact;
            @primaryContact.performed -= instance.OnPrimaryContact;
            @primaryContact.canceled -= instance.OnPrimaryContact;
            @primaryPosition.started -= instance.OnPrimaryPosition;
            @primaryPosition.performed -= instance.OnPrimaryPosition;
            @primaryPosition.canceled -= instance.OnPrimaryPosition;
            @testClavier.started -= instance.OnTestClavier;
            @testClavier.performed -= instance.OnTestClavier;
            @testClavier.canceled -= instance.OnTestClavier;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnGravitySwitch(InputAction.CallbackContext context);
        void OnPrimaryContact(InputAction.CallbackContext context);
        void OnPrimaryPosition(InputAction.CallbackContext context);
        void OnTestClavier(InputAction.CallbackContext context);
    }
}
